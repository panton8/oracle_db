DROP USER  prod CASCADE;

alter session set "_ORACLE_SCRIPT"=true;  
create user prod identified by prod;
grant all privileges to prod;
/
CREATE TABLE prod.EmployeeRole (
    RoleID INT NOT NULL PRIMARY KEY,
    RoleName VARCHAR(55) NOT NULL
)
/
CREATE TABLE prod.EmployeeType (
    EmployeeTypeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeName VARCHAR(55) NOT NULL,
    EmployeeTypeDescription VARCHAR(1000) NOT NULL
)
/
CREATE TABLE prod.HistoryType (
    HistoryTypeID INT NOT NULL PRIMARY KEY,
    HistoryTypeDescription VARCHAR(255) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)
/
CREATE TABLE prod.TaskType (
    TaskTypeID INT NOT NULL PRIMARY KEY,
    TaskTypeDescription VARCHAR(255) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)
/
CREATE TABLE prod.Task (
    TaskID INT NOT NULL PRIMARY KEY,
    TaskTypeID INT NOT NULL,
    TaskName VARCHAR(255) NOT NULL,
    TaskDescription VARCHAR(3000) NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (TaskTypeID) REFERENCES prod.TaskType(TaskTypeID)
)
/
CREATE TABLE prod.Investor (
    InvestorID INT NOT NULL PRIMARY KEY,
    InvestorFirstName VARCHAR(255) NOT NULL,
    InvestorSecondName VARCHAR(255) NOT NULL,
    InvestorContactInformation VARCHAR(3000) NOT NULL
)
/
CREATE TABLE prod.Company (
    CompanyID INT NOT NULL PRIMARY KEY,
    CompanyName VARCHAR(255) NOT NULL,
    CompanyDescription VARCHAR(3000) NOT NULL,
    CompanyAddress VARCHAR (1000) NOT NULL,
    CompanyContactInformation VARCHAR (1000) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)
/
CREATE TABLE prod.Investment (
    InvestmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    InvestorID INT NOT NULL,
    InvestmentSum INT NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES prod.Company(CompanyID),
    FOREIGN KEY (InvestorID) REFERENCES prod.Investor(InvestorID)
)
/
CREATE TABLE prod.Department (
    DepartmentID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    DepartmentName VARCHAR(255) NOT NULL,
    DepartmentDescription VARCHAR(3000) NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES prod.Company(CompanyID)
)
/
CREATE TABLE prod.Client (
    ClientID INT NOT NULL PRIMARY KEY,
    ClientName VARCHAR(255) NOT NULL,
    ClientContactInformation VARCHAR(3000) NOT NULL,
    SomeField VARCHAR(255) NOT NULL
)
/
CREATE TABLE prod.OrderClient (
    OrderClientID INT NOT NULL PRIMARY KEY,
    ProjectID INT NOT NULL,
    CLientID INT NOT NULL,
    OrderClientName VARCHAR(255) NOT NULL,
    OrderClientDescription VARCHAR(3000) NOT NULL,
    OrderClientPrice INT NOT NULL,
    OrderClientDate DATE NOT NULL,
    FOREIGN KEY (CLientID) REFERENCES prod.CLient(CLientID)
)
/
CREATE TABLE prod.Project (
    ProjectID INT NOT NULL PRIMARY KEY,
    CompanyID INT NOT NULL,
    CLientID INT NOT NULL,
    ProjectName VARCHAR(255) NOT NULL,
    ProjectDescription VARCHAR(3000) NOT NULL,
    DateStart DATE NOT NULL,
    DateFinish DATE NOT NULL,
    FOREIGN KEY (CompanyID) REFERENCES prod.Company(CompanyID),
    FOREIGN KEY (CLientID) REFERENCES prod.CLient(CLientID)
)
/
//ALTER TABLE OrderClient
//ADD FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID);

CREATE TABLE prod.Employee (
    EmployeeID INT NOT NULL PRIMARY KEY,
    EmployeeTypeID INT NOT NULL,
    EmployeeRoleID INT NOT NULL,
    DepartmentID INT NOT NULL,
    CompanyID INT NOT NULL,
    EmployeeFirstName VARCHAR(255) NOT NULL,
    EmployeeSecondName VARCHAR(255) NOT NULL,
    EmployeeSalary INT NOT NULL,
    EmployeeContactInformation VARCHAR(3000) NOT NULL,
    Login VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    FOREIGN KEY (EmployeeTypeID) REFERENCES prod.EmployeeType(EmployeeTypeID),
    FOREIGN KEY (EmployeeRoleID) REFERENCES prod.EmployeeRole(RoleID),
    FOREIGN KEY (CompanyID) REFERENCES prod.Company(CompanyID),
    FOREIGN KEY (DepartmentID) REFERENCES prod.Department(DepartmentID)
)
/
CREATE TABLE prod.EmployeeTask (
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES prod.Employee(EmployeeID),
    FOREIGN KEY (TaskID) REFERENCES prod.Task(TaskID),
    PRIMARY KEY (EmployeeID, TaskID),
    SomeField VARCHAR(255) NOT NULL
)
/
CREATE TABLE prod.EmployeeTaskHistory (
    HistoryID INT NOT NULL PRIMARY KEY,
    EmployeeID INT NOT NULL,
    TaskID INT NOT NULL,
    HistoryTypeID INT NOT NULL,
    FOREIGN KEY (TaskID) REFERENCES prod.Task(TaskID),
    FOREIGN KEY (EmployeeID) REFERENCES prod.Employee(EmployeeID),
    FOREIGN KEY (HistoryTypeID) REFERENCES prod.HistoryType(HistoryTypeID)
)
/
create table prod.MyTable
(
    id number(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    val number(10),
    CONSTRAINT id_pk PRIMARY KEY (id)
)
/
create or replace procedure prod.insertMyTable(new_val in number)
is
begin
    insert into prod.MyTable (val) values(new_val);
end;
/
create or replace function prod.getReward(salary in number, percent in number)
return double precision
is
    ret double precision;
begin
    if (salary < 0) then
        raise_application_error(-20001, 'Salary cannot be negative.');
    end if;
    
    if (percent < 0) then
        raise_application_error(-20001, 'Percent cannot be negative.');
    end if;
    
    ret := ( 1 + percent / 100) * 12 * salary;
    
    return ret;
end;
/
CREATE UNIQUE INDEX prod.indx_department_name ON prod.Department(lower(DepartmentName))



-- Additional task
CREATE UNIQUE INDEX prod.i_pass ON prod.Department(lower(DepartmentName))
